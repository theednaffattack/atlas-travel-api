/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos (v0.1.52), and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 George MacKerron
Released under the MIT licence: see LICENCE file
*/

import type {
  JSONValue,
  JSONArray,
  DateString,
  SQLFragment,
  SQL,
  GenericSQLExpression,
  ColumnNames,
  ColumnValues,
  ParentColumn,
  DefaultType,
} from "./src/core";


/* === schema: public === */

/* --- enums --- */

export type like_liketype_enum = 'activity' | 'hotel' | 'review';
export namespace every {
  export type like_liketype_enum = ['activity', 'hotel', 'review'];
}

/* --- tables --- */

export namespace comment {
  export type Table = 'comment';
  export interface Selectable {
    id: string;
    createdAt: Date;
    updatedAt: Date;
    likeType: string;
    userId: string | null;
  }
  export interface Insertable {
    id?: string | DefaultType | SQLFragment;
    createdAt?: Date | DateString | DefaultType | SQLFragment;
    updatedAt?: Date | DateString | DefaultType | SQLFragment;
    likeType: string | SQLFragment;
    userId?: string | null | DefaultType | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> { }
  export type Whereable = { [K in keyof Insertable]?: Exclude<Insertable[K] | ParentColumn, null | DefaultType> };
  export type JSONSelectable = { [K in keyof Selectable]:
    Date extends Selectable[K] ? Exclude<Selectable[K], Date> | DateString :
    Date[] extends Selectable[K] ? Exclude<Selectable[K], Date[]> | DateString[] :
    Selectable[K]
  };
  export type UniqueIndex = 'PK_0b0e4bbc8415ec426f87f3a88e2';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = GenericSQLExpression | Table | Whereable | Column | ColumnNames<Updatable | (keyof Updatable)[]> | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace event_entity {
  export type Table = 'event_entity';
  export interface Selectable {
    id: string;
    name: string;
    start_time: Date;
    end_time: Date;
    venueId: string;
    organizerId: string;
    price: number;
  }
  export interface Insertable {
    id?: string | DefaultType | SQLFragment;
    name: string | SQLFragment;
    start_time?: Date | DateString | DefaultType | SQLFragment;
    end_time?: Date | DateString | DefaultType | SQLFragment;
    venueId: string | SQLFragment;
    organizerId: string | SQLFragment;
    price: number | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> { }
  export type Whereable = { [K in keyof Insertable]?: Exclude<Insertable[K] | ParentColumn, null | DefaultType> };
  export type JSONSelectable = { [K in keyof Selectable]:
    Date extends Selectable[K] ? Exclude<Selectable[K], Date> | DateString :
    Date[] extends Selectable[K] ? Exclude<Selectable[K], Date[]> | DateString[] :
    Selectable[K]
  };
  export type UniqueIndex = 'PK_c5675e66b601bd4d0882054a430';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = GenericSQLExpression | Table | Whereable | Column | ColumnNames<Updatable | (keyof Updatable)[]> | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace hotel {
  export type Table = 'hotel';
  export interface Selectable {
    id: string;
    amenities: string | null;
    loveCount: number;
    commentCount: number | null;
    zipCodeSuffix: number | null;
    coordinates: /* pg: geography */ any | null;
    geom: /* pg: geometry */ any | null;
    price: number;
    name: string;
    address: string | null;
    suite: string | null;
    city: string | null;
    state: string | null;
    zipCode: string | null;
  }
  export interface Insertable {
    id?: string | DefaultType | SQLFragment;
    amenities?: string | null | DefaultType | SQLFragment;
    loveCount?: number | DefaultType | SQLFragment;
    commentCount?: number | null | DefaultType | SQLFragment;
    zipCodeSuffix?: number | null | DefaultType | SQLFragment;
    coordinates?: /* pg: geography */ any | null | DefaultType | SQLFragment;
    geom?: /* pg: geometry */ any | null | DefaultType | SQLFragment;
    price: number | SQLFragment;
    name: string | SQLFragment;
    address?: string | null | DefaultType | SQLFragment;
    suite?: string | null | DefaultType | SQLFragment;
    city?: string | null | DefaultType | SQLFragment;
    state?: string | null | DefaultType | SQLFragment;
    zipCode?: string | null | DefaultType | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> { }
  export type Whereable = { [K in keyof Insertable]?: Exclude<Insertable[K] | ParentColumn, null | DefaultType> };
  export type JSONSelectable = { [K in keyof Selectable]:
    Date extends Selectable[K] ? Exclude<Selectable[K], Date> | DateString :
    Date[] extends Selectable[K] ? Exclude<Selectable[K], Date[]> | DateString[] :
    Selectable[K]
  };
  export type UniqueIndex = 'PK_3a62ac86b369b36c1a297e9ab26';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = GenericSQLExpression | Table | Whereable | Column | ColumnNames<Updatable | (keyof Updatable)[]> | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace hotel_like {
  export type Table = 'hotel_like';
  export interface Selectable {
    id: string;
    createdAt: Date;
    updatedAt: Date;
    hotelId: string | null;
    userId: string | null;
  }
  export interface Insertable {
    id?: string | DefaultType | SQLFragment;
    createdAt?: Date | DateString | DefaultType | SQLFragment;
    updatedAt?: Date | DateString | DefaultType | SQLFragment;
    hotelId?: string | null | DefaultType | SQLFragment;
    userId?: string | null | DefaultType | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> { }
  export type Whereable = { [K in keyof Insertable]?: Exclude<Insertable[K] | ParentColumn, null | DefaultType> };
  export type JSONSelectable = { [K in keyof Selectable]:
    Date extends Selectable[K] ? Exclude<Selectable[K], Date> | DateString :
    Date[] extends Selectable[K] ? Exclude<Selectable[K], Date[]> | DateString[] :
    Selectable[K]
  };
  export type UniqueIndex = 'PK_9f6bcd0719db9c751dcddc9c9ed';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = GenericSQLExpression | Table | Whereable | Column | ColumnNames<Updatable | (keyof Updatable)[]> | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace image {
  export type Table = 'image';
  export interface Selectable {
    id: string;
    uri: string;
    userId: string | null;
    createdAt: Date;
    updatedAt: Date;
  }
  export interface Insertable {
    id?: string | DefaultType | SQLFragment;
    uri: string | SQLFragment;
    userId?: string | null | DefaultType | SQLFragment;
    createdAt?: Date | DateString | DefaultType | SQLFragment;
    updatedAt?: Date | DateString | DefaultType | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> { }
  export type Whereable = { [K in keyof Insertable]?: Exclude<Insertable[K] | ParentColumn, null | DefaultType> };
  export type JSONSelectable = { [K in keyof Selectable]:
    Date extends Selectable[K] ? Exclude<Selectable[K], Date> | DateString :
    Date[] extends Selectable[K] ? Exclude<Selectable[K], Date[]> | DateString[] :
    Selectable[K]
  };
  export type UniqueIndex = 'PK_d6db1ab4ee9ad9dbe86c64e4cc3';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = GenericSQLExpression | Table | Whereable | Column | ColumnNames<Updatable | (keyof Updatable)[]> | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace like {
  export type Table = 'like';
  export interface Selectable {
    id: string;
    createdAt: Date;
    updatedAt: Date;
    userId: string | null;
    likeType: like_liketype_enum;
  }
  export interface Insertable {
    id?: string | DefaultType | SQLFragment;
    createdAt?: Date | DateString | DefaultType | SQLFragment;
    updatedAt?: Date | DateString | DefaultType | SQLFragment;
    userId?: string | null | DefaultType | SQLFragment;
    likeType: like_liketype_enum | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> { }
  export type Whereable = { [K in keyof Insertable]?: Exclude<Insertable[K] | ParentColumn, null | DefaultType> };
  export type JSONSelectable = { [K in keyof Selectable]:
    Date extends Selectable[K] ? Exclude<Selectable[K], Date> | DateString :
    Date[] extends Selectable[K] ? Exclude<Selectable[K], Date[]> | DateString[] :
    Selectable[K]
  };
  export type UniqueIndex = 'PK_eff3e46d24d416b52a7e0ae4159';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = GenericSQLExpression | Table | Whereable | Column | ColumnNames<Updatable | (keyof Updatable)[]> | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace message {
  export type Table = 'message';
  export interface Selectable {
    id: string;
    createdAt: Date;
    updatedAt: Date;
    message: string;
    sentBy: string | null;
    userId: string | null;
  }
  export interface Insertable {
    id?: string | DefaultType | SQLFragment;
    createdAt?: Date | DateString | DefaultType | SQLFragment;
    updatedAt?: Date | DateString | DefaultType | SQLFragment;
    message: string | SQLFragment;
    sentBy?: string | null | DefaultType | SQLFragment;
    userId?: string | null | DefaultType | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> { }
  export type Whereable = { [K in keyof Insertable]?: Exclude<Insertable[K] | ParentColumn, null | DefaultType> };
  export type JSONSelectable = { [K in keyof Selectable]:
    Date extends Selectable[K] ? Exclude<Selectable[K], Date> | DateString :
    Date[] extends Selectable[K] ? Exclude<Selectable[K], Date[]> | DateString[] :
    Selectable[K]
  };
  export type UniqueIndex = 'PK_ba01f0a3e0123651915008bc578';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = GenericSQLExpression | Table | Whereable | Column | ColumnNames<Updatable | (keyof Updatable)[]> | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace migrations {
  export type Table = 'migrations';
  export interface Selectable {
    id: number;
    timestamp: number;
    name: string;
  }
  export interface Insertable {
    id?: number | DefaultType | SQLFragment;
    timestamp: number | SQLFragment;
    name: string | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> { }
  export type Whereable = { [K in keyof Insertable]?: Exclude<Insertable[K] | ParentColumn, null | DefaultType> };
  export type JSONSelectable = { [K in keyof Selectable]:
    Date extends Selectable[K] ? Exclude<Selectable[K], Date> | DateString :
    Date[] extends Selectable[K] ? Exclude<Selectable[K], Date[]> | DateString[] :
    Selectable[K]
  };
  export type UniqueIndex = 'PK_8c82d7f526340ab734260ea46be';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = GenericSQLExpression | Table | Whereable | Column | ColumnNames<Updatable | (keyof Updatable)[]> | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace photo {
  export type Table = 'photo';
  export interface Selectable {
    id: string;
    uri: string;
    name: string;
    description: string | null;
    isPublished: boolean | null;
    hotelId: string | null;
    venueId: string | null;
  }
  export interface Insertable {
    id?: string | DefaultType | SQLFragment;
    uri: string | SQLFragment;
    name: string | SQLFragment;
    description?: string | null | DefaultType | SQLFragment;
    isPublished?: boolean | null | DefaultType | SQLFragment;
    hotelId?: string | null | DefaultType | SQLFragment;
    venueId?: string | null | DefaultType | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> { }
  export type Whereable = { [K in keyof Insertable]?: Exclude<Insertable[K] | ParentColumn, null | DefaultType> };
  export type JSONSelectable = { [K in keyof Selectable]:
    Date extends Selectable[K] ? Exclude<Selectable[K], Date> | DateString :
    Date[] extends Selectable[K] ? Exclude<Selectable[K], Date[]> | DateString[] :
    Selectable[K]
  };
  export type UniqueIndex = 'PK_723fa50bf70dcfd06fb5a44d4ff';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = GenericSQLExpression | Table | Whereable | Column | ColumnNames<Updatable | (keyof Updatable)[]> | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace photo_metadata {
  export type Table = 'photo_metadata';
  export interface Selectable {
    id: string;
    height: number;
    width: number;
    orientation: string;
    compressed: boolean;
    comment: string;
  }
  export interface Insertable {
    id?: string | DefaultType | SQLFragment;
    height: number | SQLFragment;
    width: number | SQLFragment;
    orientation: string | SQLFragment;
    compressed: boolean | SQLFragment;
    comment: string | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> { }
  export type Whereable = { [K in keyof Insertable]?: Exclude<Insertable[K] | ParentColumn, null | DefaultType> };
  export type JSONSelectable = { [K in keyof Selectable]:
    Date extends Selectable[K] ? Exclude<Selectable[K], Date> | DateString :
    Date[] extends Selectable[K] ? Exclude<Selectable[K], Date[]> | DateString[] :
    Selectable[K]
  };
  export type UniqueIndex = 'PK_da29f04585dc190eb00e4d73420';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = GenericSQLExpression | Table | Whereable | Column | ColumnNames<Updatable | (keyof Updatable)[]> | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace reservation {
  export type Table = 'reservation';
  export interface Selectable {
    id: string;
    from: Date;
    to: Date;
    userId: string | null;
    roomId: string | null;
    createdAt: Date;
    updatedAt: Date;
  }
  export interface Insertable {
    id?: string | DefaultType | SQLFragment;
    from: Date | DateString | SQLFragment;
    to: Date | DateString | SQLFragment;
    userId?: string | null | DefaultType | SQLFragment;
    roomId?: string | null | DefaultType | SQLFragment;
    createdAt?: Date | DateString | DefaultType | SQLFragment;
    updatedAt?: Date | DateString | DefaultType | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> { }
  export type Whereable = { [K in keyof Insertable]?: Exclude<Insertable[K] | ParentColumn, null | DefaultType> };
  export type JSONSelectable = { [K in keyof Selectable]:
    Date extends Selectable[K] ? Exclude<Selectable[K], Date> | DateString :
    Date[] extends Selectable[K] ? Exclude<Selectable[K], Date[]> | DateString[] :
    Selectable[K]
  };
  export type UniqueIndex = 'PK_48b1f9922368359ab88e8bfa525';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = GenericSQLExpression | Table | Whereable | Column | ColumnNames<Updatable | (keyof Updatable)[]> | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace review {
  export type Table = 'review';
  export interface Selectable {
    id: string;
    value: number;
    title: string;
    text: string;
    userId: string | null;
    hotelId: string | null;
    createdAt: Date;
    updatedAt: Date;
    venueId: string | null;
  }
  export interface Insertable {
    id?: string | DefaultType | SQLFragment;
    value: number | SQLFragment;
    title: string | SQLFragment;
    text: string | SQLFragment;
    userId?: string | null | DefaultType | SQLFragment;
    hotelId?: string | null | DefaultType | SQLFragment;
    createdAt?: Date | DateString | DefaultType | SQLFragment;
    updatedAt?: Date | DateString | DefaultType | SQLFragment;
    venueId?: string | null | DefaultType | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> { }
  export type Whereable = { [K in keyof Insertable]?: Exclude<Insertable[K] | ParentColumn, null | DefaultType> };
  export type JSONSelectable = { [K in keyof Selectable]:
    Date extends Selectable[K] ? Exclude<Selectable[K], Date> | DateString :
    Date[] extends Selectable[K] ? Exclude<Selectable[K], Date[]> | DateString[] :
    Selectable[K]
  };
  export type UniqueIndex = 'PK_2e4299a343a81574217255c00ca';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = GenericSQLExpression | Table | Whereable | Column | ColumnNames<Updatable | (keyof Updatable)[]> | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace room {
  export type Table = 'room';
  export interface Selectable {
    id: string;
    roomNumber: string;
    type: string;
    beds: number;
    maxOccupancy: number;
    costPerNight: number;
    hotelId: string | null;
  }
  export interface Insertable {
    id?: string | DefaultType | SQLFragment;
    roomNumber: string | SQLFragment;
    type: string | SQLFragment;
    beds: number | SQLFragment;
    maxOccupancy: number | SQLFragment;
    costPerNight: number | SQLFragment;
    hotelId?: string | null | DefaultType | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> { }
  export type Whereable = { [K in keyof Insertable]?: Exclude<Insertable[K] | ParentColumn, null | DefaultType> };
  export type JSONSelectable = { [K in keyof Selectable]:
    Date extends Selectable[K] ? Exclude<Selectable[K], Date> | DateString :
    Date[] extends Selectable[K] ? Exclude<Selectable[K], Date[]> | DateString[] :
    Selectable[K]
  };
  export type UniqueIndex = 'PK_c6d46db005d623e691b2fbcba23';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = GenericSQLExpression | Table | Whereable | Column | ColumnNames<Updatable | (keyof Updatable)[]> | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace saved {
  export type Table = 'saved';
  export interface Selectable {
    id: string;
    userId: string | null;
  }
  export interface Insertable {
    id?: string | DefaultType | SQLFragment;
    userId?: string | null | DefaultType | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> { }
  export type Whereable = { [K in keyof Insertable]?: Exclude<Insertable[K] | ParentColumn, null | DefaultType> };
  export type JSONSelectable = { [K in keyof Selectable]:
    Date extends Selectable[K] ? Exclude<Selectable[K], Date> | DateString :
    Date[] extends Selectable[K] ? Exclude<Selectable[K], Date[]> | DateString[] :
    Selectable[K]
  };
  export type UniqueIndex = 'PK_cb4672121c11ed3824acc8d0985';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = GenericSQLExpression | Table | Whereable | Column | ColumnNames<Updatable | (keyof Updatable)[]> | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace user {
  export type Table = 'user';
  export interface Selectable {
    id: string;
    firstName: string;
    lastName: string;
    email: string;
    profileImageUri: string | null;
    password: string;
    confirmed: boolean;
    createdAt: Date;
    updatedAt: Date;
  }
  export interface Insertable {
    id?: string | DefaultType | SQLFragment;
    firstName: string | SQLFragment;
    lastName: string | SQLFragment;
    email: string | SQLFragment;
    profileImageUri?: string | null | DefaultType | SQLFragment;
    password: string | SQLFragment;
    confirmed?: boolean | DefaultType | SQLFragment;
    createdAt?: Date | DateString | DefaultType | SQLFragment;
    updatedAt?: Date | DateString | DefaultType | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> { }
  export type Whereable = { [K in keyof Insertable]?: Exclude<Insertable[K] | ParentColumn, null | DefaultType> };
  export type JSONSelectable = { [K in keyof Selectable]:
    Date extends Selectable[K] ? Exclude<Selectable[K], Date> | DateString :
    Date[] extends Selectable[K] ? Exclude<Selectable[K], Date[]> | DateString[] :
    Selectable[K]
  };
  export type UniqueIndex = 'PK_cace4a159ff9f2512dd42373760' | 'UQ_e12875dfb3b1d92d7d7c5377e22' | 'UQ_3d328f5ff477a6bd7994cdbe823';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = GenericSQLExpression | Table | Whereable | Column | ColumnNames<Updatable | (keyof Updatable)[]> | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace user_followers_user {
  export type Table = 'user_followers_user';
  export interface Selectable {
    userId_1: string;
    userId_2: string;
  }
  export interface Insertable {
    userId_1: string | SQLFragment;
    userId_2: string | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> { }
  export type Whereable = { [K in keyof Insertable]?: Exclude<Insertable[K] | ParentColumn, null | DefaultType> };
  export type JSONSelectable = { [K in keyof Selectable]:
    Date extends Selectable[K] ? Exclude<Selectable[K], Date> | DateString :
    Date[] extends Selectable[K] ? Exclude<Selectable[K], Date[]> | DateString[] :
    Selectable[K]
  };
  export type UniqueIndex = 'PK_980ff03f415077df184596dcf73';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = GenericSQLExpression | Table | Whereable | Column | ColumnNames<Updatable | (keyof Updatable)[]> | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace venue {
  export type Table = 'venue';
  export interface Selectable {
    id: string;
    name: string;
    amenities: string | null;
    loveCount: number;
    commentCount: number | null;
    address: string | null;
    suite: string | null;
    city: string | null;
    state: string | null;
    zipCode: string | null;
    zipCodeSuffix: number | null;
    coordinates: /* pg: geography */ any | null;
    type: string | null;
  }
  export interface Insertable {
    id?: string | DefaultType | SQLFragment;
    name: string | SQLFragment;
    amenities?: string | null | DefaultType | SQLFragment;
    loveCount?: number | DefaultType | SQLFragment;
    commentCount?: number | null | DefaultType | SQLFragment;
    address?: string | null | DefaultType | SQLFragment;
    suite?: string | null | DefaultType | SQLFragment;
    city?: string | null | DefaultType | SQLFragment;
    state?: string | null | DefaultType | SQLFragment;
    zipCode?: string | null | DefaultType | SQLFragment;
    zipCodeSuffix?: number | null | DefaultType | SQLFragment;
    coordinates?: /* pg: geography */ any | null | DefaultType | SQLFragment;
    type?: string | null | DefaultType | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> { }
  export type Whereable = { [K in keyof Insertable]?: Exclude<Insertable[K] | ParentColumn, null | DefaultType> };
  export type JSONSelectable = { [K in keyof Selectable]:
    Date extends Selectable[K] ? Exclude<Selectable[K], Date> | DateString :
    Date[] extends Selectable[K] ? Exclude<Selectable[K], Date[]> | DateString[] :
    Selectable[K]
  };
  export type UniqueIndex = 'PK_c53deb6d1bcb088f9d459e7dbc0';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = GenericSQLExpression | Table | Whereable | Column | ColumnNames<Updatable | (keyof Updatable)[]> | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace venue_seating {
  export type Table = 'venue_seating';
  export interface Selectable {
    id: string;
    roomNumber: string;
    type: string;
    beds: number;
    maxOccupancy: number;
    costPerNight: number;
    venueId: string | null;
  }
  export interface Insertable {
    id?: string | DefaultType | SQLFragment;
    roomNumber: string | SQLFragment;
    type: string | SQLFragment;
    beds: number | SQLFragment;
    maxOccupancy: number | SQLFragment;
    costPerNight: number | SQLFragment;
    venueId?: string | null | DefaultType | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> { }
  export type Whereable = { [K in keyof Insertable]?: Exclude<Insertable[K] | ParentColumn, null | DefaultType> };
  export type JSONSelectable = { [K in keyof Selectable]:
    Date extends Selectable[K] ? Exclude<Selectable[K], Date> | DateString :
    Date[] extends Selectable[K] ? Exclude<Selectable[K], Date[]> | DateString[] :
    Selectable[K]
  };
  export type UniqueIndex = 'PK_55505a971de114cd6033177566d';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = GenericSQLExpression | Table | Whereable | Column | ColumnNames<Updatable | (keyof Updatable)[]> | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

/* === cross-table types === */

export type Table = comment.Table | event_entity.Table | hotel.Table | hotel_like.Table | image.Table | like.Table | message.Table | migrations.Table | photo.Table | photo_metadata.Table | reservation.Table | review.Table | room.Table | saved.Table | user.Table | user_followers_user.Table | venue.Table | venue_seating.Table;
export type Selectable = comment.Selectable | event_entity.Selectable | hotel.Selectable | hotel_like.Selectable | image.Selectable | like.Selectable | message.Selectable | migrations.Selectable | photo.Selectable | photo_metadata.Selectable | reservation.Selectable | review.Selectable | room.Selectable | saved.Selectable | user.Selectable | user_followers_user.Selectable | venue.Selectable | venue_seating.Selectable;
export type Whereable = comment.Whereable | event_entity.Whereable | hotel.Whereable | hotel_like.Whereable | image.Whereable | like.Whereable | message.Whereable | migrations.Whereable | photo.Whereable | photo_metadata.Whereable | reservation.Whereable | review.Whereable | room.Whereable | saved.Whereable | user.Whereable | user_followers_user.Whereable | venue.Whereable | venue_seating.Whereable;
export type Insertable = comment.Insertable | event_entity.Insertable | hotel.Insertable | hotel_like.Insertable | image.Insertable | like.Insertable | message.Insertable | migrations.Insertable | photo.Insertable | photo_metadata.Insertable | reservation.Insertable | review.Insertable | room.Insertable | saved.Insertable | user.Insertable | user_followers_user.Insertable | venue.Insertable | venue_seating.Insertable;
export type Updatable = comment.Updatable | event_entity.Updatable | hotel.Updatable | hotel_like.Updatable | image.Updatable | like.Updatable | message.Updatable | migrations.Updatable | photo.Updatable | photo_metadata.Updatable | reservation.Updatable | review.Updatable | room.Updatable | saved.Updatable | user.Updatable | user_followers_user.Updatable | venue.Updatable | venue_seating.Updatable;
export type UniqueIndex = comment.UniqueIndex | event_entity.UniqueIndex | hotel.UniqueIndex | hotel_like.UniqueIndex | image.UniqueIndex | like.UniqueIndex | message.UniqueIndex | migrations.UniqueIndex | photo.UniqueIndex | photo_metadata.UniqueIndex | reservation.UniqueIndex | review.UniqueIndex | room.UniqueIndex | saved.UniqueIndex | user.UniqueIndex | user_followers_user.UniqueIndex | venue.UniqueIndex | venue_seating.UniqueIndex;
export type Column = comment.Column | event_entity.Column | hotel.Column | hotel_like.Column | image.Column | like.Column | message.Column | migrations.Column | photo.Column | photo_metadata.Column | reservation.Column | review.Column | room.Column | saved.Column | user.Column | user_followers_user.Column | venue.Column | venue_seating.Column;
export type AllTables = [comment.Table, event_entity.Table, hotel.Table, hotel_like.Table, image.Table, like.Table, message.Table, migrations.Table, photo.Table, photo_metadata.Table, reservation.Table, review.Table, room.Table, saved.Table, user.Table, user_followers_user.Table, venue.Table, venue_seating.Table];


export type SelectableForTable<T extends Table> = {
  comment: comment.Selectable;
  event_entity: event_entity.Selectable;
  hotel: hotel.Selectable;
  hotel_like: hotel_like.Selectable;
  image: image.Selectable;
  like: like.Selectable;
  message: message.Selectable;
  migrations: migrations.Selectable;
  photo: photo.Selectable;
  photo_metadata: photo_metadata.Selectable;
  reservation: reservation.Selectable;
  review: review.Selectable;
  room: room.Selectable;
  saved: saved.Selectable;
  user: user.Selectable;
  user_followers_user: user_followers_user.Selectable;
  venue: venue.Selectable;
  venue_seating: venue_seating.Selectable;
}[T];

export type WhereableForTable<T extends Table> = {
  comment: comment.Whereable;
  event_entity: event_entity.Whereable;
  hotel: hotel.Whereable;
  hotel_like: hotel_like.Whereable;
  image: image.Whereable;
  like: like.Whereable;
  message: message.Whereable;
  migrations: migrations.Whereable;
  photo: photo.Whereable;
  photo_metadata: photo_metadata.Whereable;
  reservation: reservation.Whereable;
  review: review.Whereable;
  room: room.Whereable;
  saved: saved.Whereable;
  user: user.Whereable;
  user_followers_user: user_followers_user.Whereable;
  venue: venue.Whereable;
  venue_seating: venue_seating.Whereable;
}[T];

export type InsertableForTable<T extends Table> = {
  comment: comment.Insertable;
  event_entity: event_entity.Insertable;
  hotel: hotel.Insertable;
  hotel_like: hotel_like.Insertable;
  image: image.Insertable;
  like: like.Insertable;
  message: message.Insertable;
  migrations: migrations.Insertable;
  photo: photo.Insertable;
  photo_metadata: photo_metadata.Insertable;
  reservation: reservation.Insertable;
  review: review.Insertable;
  room: room.Insertable;
  saved: saved.Insertable;
  user: user.Insertable;
  user_followers_user: user_followers_user.Insertable;
  venue: venue.Insertable;
  venue_seating: venue_seating.Insertable;
}[T];

export type UpdatableForTable<T extends Table> = {
  comment: comment.Updatable;
  event_entity: event_entity.Updatable;
  hotel: hotel.Updatable;
  hotel_like: hotel_like.Updatable;
  image: image.Updatable;
  like: like.Updatable;
  message: message.Updatable;
  migrations: migrations.Updatable;
  photo: photo.Updatable;
  photo_metadata: photo_metadata.Updatable;
  reservation: reservation.Updatable;
  review: review.Updatable;
  room: room.Updatable;
  saved: saved.Updatable;
  user: user.Updatable;
  user_followers_user: user_followers_user.Updatable;
  venue: venue.Updatable;
  venue_seating: venue_seating.Updatable;
}[T];

export type UniqueIndexForTable<T extends Table> = {
  comment: comment.UniqueIndex;
  event_entity: event_entity.UniqueIndex;
  hotel: hotel.UniqueIndex;
  hotel_like: hotel_like.UniqueIndex;
  image: image.UniqueIndex;
  like: like.UniqueIndex;
  message: message.UniqueIndex;
  migrations: migrations.UniqueIndex;
  photo: photo.UniqueIndex;
  photo_metadata: photo_metadata.UniqueIndex;
  reservation: reservation.UniqueIndex;
  review: review.UniqueIndex;
  room: room.UniqueIndex;
  saved: saved.UniqueIndex;
  user: user.UniqueIndex;
  user_followers_user: user_followers_user.UniqueIndex;
  venue: venue.UniqueIndex;
  venue_seating: venue_seating.UniqueIndex;
}[T];

export type ColumnForTable<T extends Table> = {
  comment: comment.Column;
  event_entity: event_entity.Column;
  hotel: hotel.Column;
  hotel_like: hotel_like.Column;
  image: image.Column;
  like: like.Column;
  message: message.Column;
  migrations: migrations.Column;
  photo: photo.Column;
  photo_metadata: photo_metadata.Column;
  reservation: reservation.Column;
  review: review.Column;
  room: room.Column;
  saved: saved.Column;
  user: user.Column;
  user_followers_user: user_followers_user.Column;
  venue: venue.Column;
  venue_seating: venue_seating.Column;
}[T];

export type SQLForTable<T extends Table> = {
  comment: comment.SQL;
  event_entity: event_entity.SQL;
  hotel: hotel.SQL;
  hotel_like: hotel_like.SQL;
  image: image.SQL;
  like: like.SQL;
  message: message.SQL;
  migrations: migrations.SQL;
  photo: photo.SQL;
  photo_metadata: photo_metadata.SQL;
  reservation: reservation.SQL;
  review: review.SQL;
  room: room.SQL;
  saved: saved.SQL;
  user: user.SQL;
  user_followers_user: user_followers_user.SQL;
  venue: venue.SQL;
  venue_seating: venue_seating.SQL;
}[T];

